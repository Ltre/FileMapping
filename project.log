【阶段一：依赖TP框架】	
		13-7-18
		控制器调度结构完成
		
		【
		
		命令参数已格式化
		
		加固验证id值
		
		添加错误处理调度
		
		添加空操作调度
		
		已防止目录源码遍历
		
		】
		
		13-7-19
		初步加入DOM支持
		
		正在实现【由id串寻找节点】
		
		13-7-20
		【
		XMLUtil内方法取消static。
		DirAction-dirdir()中使用XMLUtil对象。
		可以提交父节点id串，从而生成新节点id串，并保存新节点到global文件。
		】
		
		13-7-21 5点
		发生代码错误，难以回到原貌，遂退回上次版本。
		在上次版本中添加本次版本中有价值的代码段。
		如URL参数分析等等。
		
		13-7-21 16点
		代码回滚和上次版本新功能修复完成
		【
		添加目录时可以验证节点名是file还是dir
		能够从URL分析出status,shell,params,ids
		】
		13-7-22 2点
		【
		优化URL参数解析代码
		优化调度代码
		验证插入目录的显示名称不能和当前目录内的项目相同
		】
		
		13-7-22  15点
		优化上一次版本的冗余代码
		
		2013-7-23 23点
		【
		1、修正请求【http://localhost:8080/Filemanager/?id=dirdir|abc|E%6C%5Cabc|real|0】时
		所出现的<虚拟文件系统不存在该节点>的错误
		2、执行dirdir命令时，验证文件显示名称 不能含有如下特殊字符：
		《“\”、“/”、“:”、“*”、“?”、“双引号”、“<”、“>”、“|”》
		3、缩进化保存XML到global文件
		】
		
		2013-7-24-21点
		【
		已解决【http://localhost:8080/Filemanager/?id=dirdir|dfd不进行URL转码直接输入中文字符45d|E%3a5C6Cdiabi|real|0】执行并对DOM执行save操作后，将会清空GLOBAL文件，在下次重载GLOBAL将发生的DOM无根节点的问题。
		      解决策略：
			1、预留 备用的 GLOBAL文件，当从主GLOBAL文件加载的DOM树为空时（并非null），将重新加载备用GLOBAL文件。
			2、如果加载备用文件成功得到非空的DOM树，则要自动修复主GLOBAL文件。
			3、何时保存到备用文件？不是每次保存主GLOBAL的时候就保存备用文件，而是在每次成功加载主GLOBAL得到非空DOM树时，才会多保存一份到备用文件。
			4、如果从备用文件加载到的DOM树也是空的，则说明备用文件也损坏了，就要为系统报错。
			5、在保存过程中，验证保存后的主GLOBAL文件能否被正确加载，如果能加载，则保存多一份到备用文件；如果不能被加载，则从备用文件加载DOM，然后来修复主GLOBAL文件。
			6、为了减少不必要的损失，应该定期备份GLOBAL文件到安全的地方。【这可以编写自动备份策略】
		       以上6个策略已完成前5个，尚未完全测试效果，不过，已经可以杜绝在地址栏输入纯中文了。
			经测试，虽然还是会把纯中文参数保存到主GLOBAL文件中，并使该文件变成ANSI编码保存，但是在下次加载的时候，系统会从正确的备用文件加载DOM，把错误的主GLOBAL文件还原成UTF-8编码保存，并删除纯中文参数添加的错误节点。
		】
		【正在研究  管理端如何部署（URL、跳转、目录设置等等）、普通文件浏览模块部署、参数干扰方案
		详细：
			1、输入http://localhost:8080/FileManager直接到欢迎页
			2、输入http://localhost:8080/FileManager/admin到管理登录页。这就要求/admin目录下有index.php，最好使用TP加上自创的调度机制。
			3、/admin目录下：index可以调度状态0~5.
			4、根目录下：index只能调度状态2（仅有id串）
			5、执行/admin/index.php后，自动跳到/admin.php. ；/admin.php  的TP目录指向/manager，具体配置：在IndexAction中定义空操作，这样就可以直接输入/FileManager/admin/xxxxx/参数   访问了。或者不这样配置，直接输入/FileManager/admin/?乱码=参数
			6、参数串干扰方案：可以输入一堆参数【?xxx=xxx&xxx=xxx&xxx=xxx......】，到服务端时，仅仅取出最中间的那个参数，如果参数个数为偶数，则取第【个数/2+1】个参数
		】
		
		2013-7-25  0点
		【实现／admin跳转到Index－＞admin()模块；常量配置已转移到config.php】
		【参数干扰策略暂时放弃，感觉没用】
		
		2013-7-27-2点
		【可根据id串来下载对应的file类型文件】
		对虚拟文件系统的访问操作全部放置于AccessAction中。
		通过转码，解决了无法下载含中文路径和名称的文件的问题。
		暂时不支持下载link类型的文件。
		暂时不支持大文件下载。
		
		2013-7-27-20点
		【含有可以下载大文件的代码，但必须脱离TP框架才能实现，准备抛弃TP框架】
		需要配置php.ini以获得最大下载支持。
		增加下载相关的常量。


【阶段二：脱离TP框架】

		2013-7-27-22点
		【
		在第一阶段最后版本的基础上，将代码成功移植到脱离TP的项目上。
		所有功能保持不变。
		】
		
		2013-7-28-1点
		【
		增加测试模块：/test/...php的各种测试类方法中。其驱动模块位于  /index.php调度过后的“状态5”分支。
		后续增加测试模块的参数格式如：vfs.com/?xxx=测试命令[|后续参数|后续参数|后续参数|后续参数]
		在/demo.html 添加了 测试 URL参数的 转码器
		将AccessAction : : access ( ) 作为默认的URL SHELL，其指令为“access”，也可以省略指令，直接写id串【x-x-x】
		修正Util_.class、XMLUtil.class、DirAction中的个别严重错误，使程序更健壮。
		】
【阶段三：完美解决非UTF-8错插XML配置文件的问题、移植到自创框架ActionInvoker】	

		2013-7-31-23点
		【
		1、2013-7-29-17点：完美解决2013-7-24-21点出现的非UTF-8编码插入问题，
			现已使用mb_detect_encoding()完全阻止浏览器地址栏的纯中文或其它非UTF-8字串输入造成的错误XML插入，
			VFS全局配置文件的出错率大大降低，目前尚未发现新类型的潜在错误。
		2、2013-7-30-3点：完善自创框架ActionInvoker。准备将项目源码移植到新框架上。关于自创框架，下一个工作目标就是添加过滤器支持。
		3、2013-7-31-23点：项目源码已成功移植到新框架上。
		】

		2013-8-10 20点
		【
		1、重新套用2013-8-6更新的ActionInvoker框架；
		2、支持URL指令大小写忽略
		】

		2013-8-15 16点【管理端文件校验、CryptUtil加密、管理端顶级视图左侧索引数据与服务器同步可展开收缩】
		【
		1、加入管理端过滤器：校验管理者身份。
		2、设计管理端登陆页。
		3、设计管理端顶级视图。
		4、加入自创可逆加密工具CryptUtil
		5、确定管理端校验文件的组织方式和读取方式。
		6、在AccessAction中设计目录访问逻辑，并将结果呈现到管理端视图的树形索引中。
		7、已成功将XML第一层加载到树形索引中，接下来要考虑展开的动作。--8/14
		8、已经完成目录的展开和收缩，并且和服务器的数据同步。8/15
		】
		
		2013-8-16 3点【索引树响应与右侧内容区、上方路径导航均同步】
		【
		1、索引树全部click事件的业务处理完成。
		2、右侧内容区的所有图标布置完毕，文件或目录的全部click业务处理完成。
		3、路径导航可随所在位置变化，可以显示活动项（可以利用class=active设计目录后退逻辑）。
		】

		2013-8-28 4点【右侧图标上下文菜单，新建目录，移除目录】
		【
		1、右侧区域的图标增加上下文菜单
		2、可新建虚拟目录和真实目录
		3、可移除目录
		4、JS新增全局变量：记录右键所选目录的id串；记录所进入目录的id串。
		5、新增错误提示框，并通过检索AJAX回执中的“@ErrorAction”来判断是否发生错误。
		6、新增操作询问框，可以动态改变标题和<span>的提示语，并动态指定“确定”按钮的onclick动作。
		】
		
		